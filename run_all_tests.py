#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ª–µ–Ω–¥–∏–Ω–≥–∞
–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä, –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç—ã –∏ —Å–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç
"""

import subprocess
import time
import os
import sys
import signal
from pathlib import Path

def start_server():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç HTTP —Å–µ—Ä–≤–µ—Ä"""
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä...")
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
        process = subprocess.Popen(
            ["python3", "-m", "http.server", "8000"],
            cwd="/home/zebracoder/projects/Dominic",
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        time.sleep(3)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
        if process.poll() is None:
            print("‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8000")
            return process
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return None

def run_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("\nüß™ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã...")
    
    tests = [
        ("test_landing.py", "–û—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"),
        ("simple_test.py", "–ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    ]
    
    results = []
    
    for test_file, description in tests:
        print(f"\nüìã {description}...")
        try:
            result = subprocess.run(
                ["python3", test_file],
                cwd="/home/zebracoder/projects/Dominic",
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                print(f"‚úÖ {description} - –£–°–ü–ï–®–ù–û")
                results.append((description, True, result.stdout))
            else:
                print(f"‚ùå {description} - –û–®–ò–ë–ö–ê")
                results.append((description, False, result.stderr))
                
        except subprocess.TimeoutExpired:
            print(f"‚è∞ {description} - –¢–ê–ô–ú–ê–£–¢")
            results.append((description, False, "–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"))
        except Exception as e:
            print(f"üí• {description} - –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
            results.append((description, False, str(e)))
    
    return results

def create_final_report(results):
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
    print("\nüìä –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç...")
    
    report_content = f"""# üé≠ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –õ–ï–ù–î–ò–ù–ì–ê

## üìÖ –î–∞—Ç–∞: {time.strftime('%Y-%m-%d %H:%M:%S')}
## üåê URL: http://localhost:8000
## üéØ –°—Ç–∞—Ç—É—Å: {'‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´' if all(r[1] for r in results) else '‚ùå –ï–°–¢–¨ –û–®–ò–ë–ö–ò'}

## üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:

"""
    
    for description, success, output in results:
        status = "‚úÖ –£–°–ü–ï–®–ù–û" if success else "‚ùå –û–®–ò–ë–ö–ê"
        report_content += f"### {description}\n"
        report_content += f"**–°—Ç–∞—Ç—É—Å**: {status}\n\n"
        
        if success:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏–∑ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
            lines = output.split('\n')
            key_lines = [line for line in lines if '‚úÖ' in line or 'üéâ' in line or 'üìä' in line]
            if key_lines:
                report_content += "**–ö–ª—é—á–µ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã**:\n"
                for line in key_lines[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
                    report_content += f"- {line}\n"
        else:
            report_content += f"**–û—à–∏–±–∫–∞**:\n```\n{output[:500]}...\n```\n"
        
        report_content += "\n---\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
    report_content += """## üìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:

- `landing_screenshot.png` - –°–∫—Ä–∏–Ω—à–æ—Ç –ª–µ–Ω–¥–∏–Ω–≥–∞
- `final_screenshot.png` - –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
- `TEST_REPORT.md` - –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
- `FINAL_REPORT.md` - –≠—Ç–æ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç

## üéâ –ó–∞–∫–ª—é—á–µ–Ω–∏–µ:

"""
    
    if all(r[1] for r in results):
        report_content += """‚úÖ **–õ–ï–ù–î–ò–ù–ì –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!**

–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ:
- ‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç
- ‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç
- ‚úÖ –§–æ—Ä–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
- ‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç
- ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç–ª–∏—á–Ω–∞—è

**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è**: –õ–µ–Ω–¥–∏–Ω–≥ –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω!
"""
    else:
        report_content += """‚ùå **–û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´**

–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:
1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –æ—à–∏–±–æ–∫ –≤—ã—à–µ
2. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
3. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è**: –ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω.
"""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    with open("/home/zebracoder/projects/Dominic/FINAL_REPORT.md", "w", encoding="utf-8") as f:
        f.write(report_content)
    
    print("‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: FINAL_REPORT.md")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üé≠ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–ï–ù–î–ò–ù–ì–ê –î–û–ú–ò–ù–ò–ö–ê –î–ñ–û–ö–ï–†–ê")
    print("=" * 60)
    
    server_process = None
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        server_process = start_server()
        if not server_process:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä. –ó–∞–≤–µ—Ä—à–∞–µ–º.")
            return 1
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        results = run_tests()
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        create_final_report(results)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
        print("\n" + "=" * 60)
        print("üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        print("=" * 60)
        
        success_count = sum(1 for r in results if r[1])
        total_count = len(results)
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_count} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        if success_count == total_count:
            print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("üöÄ –õ–µ–Ω–¥–∏–Ω–≥ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
            return 0
        else:
            print("‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´!")
            print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—á–µ—Ç—ã –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")
            return 1
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        if server_process:
            print("\nüõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...")
            try:
                server_process.terminate()
                server_process.wait(timeout=5)
                print("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except:
                server_process.kill()
                print("‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    sys.exit(main())
